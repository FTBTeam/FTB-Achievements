buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
			name = "Modmuss50"
			url = "http://maven.modmuss50.me/"
		}
		maven {
			name = 'mojang'
			url = 'https://libraries.minecraft.net/'
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = 1.8
targetCompatibility = 1.8


version = "1.12.2-2.0.0"

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

minecraft {
	version = "1.12.2-14.23.4.2757"
	mappings = "snapshot_20170925"
	replace "@MODVERSION@", project.version
	useDepAts = true
	runDir = "run"
}

group = 'FTB-Achievements'

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version


	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

configurations {
	shade
	compile.extendsFrom shade
}

repositories {
	maven {
		name = "Modmuss50"
		url = "http://maven.modmuss50.me/"
	}
	maven {
		//IC2
		name = "player-ic2"
		url = "http://maven.ic2.player.to/"
	}
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
	maven {
		name 'CB Repo'
		url "http://chickenbones.net/maven/"
	}
	maven {
		// JEI
		name "TiC"
		url "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name "LatvianModder"
		url "https://maven.latmod.com/"
	}
}

dependencies {
	shade group: 'org.nanohttpd', name: 'nanohttpd', version: '2.3.1'
	compile 'net.industrial-craft:industrialcraft-2:2.8.10-ex112'
	deobfCompile('RebornCore:RebornCore-1.12.2:+:universal') {
		transitive = false
	}
    deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.19-11"
	deobfCompile "mezz.jei:jei_1.12.2:+"
	deobfCompile "com.feed_the_beast.mods:FTBLib:+"
}

jar {
	classifier = 'universal'
}

jar.dependsOn shadowJar
jar.enabled = false

shadowJar {
	classifier = 'universal'
	archiveName = tasks.jar.archiveName
	configurations = [project.configurations.shade]
	relocate 'fi.iki.elonen', 'me.modmuss50.ftba.repack.fi.iki.elonen'
}

reobfJar {
	setJar(tasks.shadowJar.archivePath)
}
reobfJar.dependsOn shadowJar

task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf {
		project.hasProperty('keyStore')
	}

	if (project.hasProperty('keyStore')) {
		keyStore = project.keyStore
		alias = project.keyStoreAlias
		storePass = project.keyStorePass
		keyPass = project.keyStoreKeyPass
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}

}

build.dependsOn signJar

import groovy.util.XmlSlurper
import org.apache.commons.io.FileUtils

task curseTools << {
	def cacheFiles = new File(".gradle/curseTools")
	if (!cacheFiles.exists()) {
		cacheFiles.mkdirs()
	}

	def mavenMetadata = new File(cacheFiles, "maven-metadata.xml")

	logger.lifecycle(":downloading curseTools metadata")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/maven-metadata.xml"), mavenMetadata)

	def metadata = new XmlSlurper().parseText(FileUtils.readFileToString(mavenMetadata))
	def curseToolsVersion = metadata.versioning.release

	def curseTools = new File(cacheFiles, "${curseToolsVersion}.jar")

	logger.lifecycle(":downloading CurseTools")
	FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/${curseToolsVersion}/CurseTools-${curseToolsVersion}.jar"), curseTools)

	logger.lifecycle(":launching CurseTools")
	ant.java(jar: curseTools.getAbsolutePath(), fork: true, spawn: false) {
		arg(value: jar.archivePath.getAbsolutePath())
	}
}
tasks.curseTools.dependsOn "build"
